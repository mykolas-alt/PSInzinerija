@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using PSInzinerija1.Services
@using PSInzinerija1.Data.Models
@using PSInzinerija1.Enums
@using PSInzinerija1.Data.ApplicationDbContext

<PageTitle>Home</PageTitle>

<h1>Welcome to itssoover Mind Games</h1>

Select one of the available games

<AuthorizeView>
    <NotAuthorized>
        <form id="login-form" class="w-25" >
            <div class="form-group row">
                <label for="email" class="col-sm-2 col-form-label">Email:</label>
                <div>
                    <input type="text" id="email" name="email" class="form-control" placeholder="Enter email" required />
                </div>

                <label for="password" class="col-sm-2 col-form-label">Password:</label>
                <div>
                    <input type="text" id="password" name="password" class="form-control" placeholder="Password" required />
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-10 m-1">
                    <button type="submit" class="btn btn-primary">Sign in</button>
                </div>
            </div>
        </form>

        <a href="/Registration" style="font-size: 15px; justify-self: end;">Register</a>
    </NotAuthorized>
    <Authorized>
        <h4>
            You are already logged in!
        </h4>
        <h2>Your Recent Scores</h2>
        @if (recentScores != null)
        {
            @foreach (var gameScores in recentScores)
            {
                <h3>@gameScores.Key</h3>
                <ul>
                    @foreach (var score in gameScores.Value)
                    {
                        <li>@score.RecordDate: @score.HighScore</li>
                    }
                </ul>
            }
        }
        else
        {
            <p>Loading...</p>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    [Inject]
    protected HighScoreService HighScoreService { get; set; }

    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    protected UserManager<User> UserManager { get; set; }

    [Inject]
    protected ApplicationDbContext Context { get; set; }

    private Dictionary<string, List<HighScoresEntry>>? recentScores;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var highScoreFetcher = new HighScoreFetcher<User, AvailableGames>(Context, UserManager);
        recentScores = await highScoreFetcher.GetUserRecentScoresAsync(user, 3);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            JSRuntime.InvokeVoidAsync("onBlazorReadyLog");
    }
}