@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<EditForm Model="@loginModel" class="authentication-form" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email" class="white-text">Email</label>
        <InputText id="email" class="form-control light-gray-input" @bind-Value="loginModel.Email" />
    </div>

    <div class="form-group">
        <label for="password" class="white-text">Password</label>
        <InputText id="password" class="form-control light-gray-input" @bind-Value="loginModel.Password" type="password" />
    </div>

    <div class="button-container" >
        <NavLink class="pageButton clickable-button" href="registration">
            Registration
        </NavLink>
        <button type="submit" class="pageButton clickable-button">Login</button>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLogin()
    {
        var url = "api/login?useCookies=true&useSessionCookies=true"; // Backend login URL
        var client = HttpClientFactory.CreateClient("BackendApi");
        var formData = new
        {
            email = loginModel.Email,
            password = loginModel.Password
        };

        var fullURL = client.BaseAddress + url;
        var success = await JS.InvokeAsync<bool>("postLogin", fullURL, formData.email, formData.password);
        if (success)
        {
            NavigationManager.Refresh(true);
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}
