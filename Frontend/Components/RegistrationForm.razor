@using System.Text.Json.Nodes
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<Toasts class="p-3 text-dark" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomLeft" />
<EditForm Model="@registrationModel" class="authentication-form" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="userName">Username</label>
        <InputText id="userName" class="form-control" @bind-Value="registrationModel.UserName" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" @bind-Value="registrationModel.Password" type="password" />
    </div>

    <button type="submit" style="margin-top: 20px;" class="clickable-button pageButton">Register</button>
</EditForm>

@code {
    List<ToastMessage> messages = new();
    private RegistrationModel registrationModel = new();

    private async Task HandleRegistration()
    {
        var url = "api/register"; // Backend register URL
        var client = HttpClientFactory.CreateClient("BackendApi");
        var formData = new
        {
            userName = registrationModel.UserName,
            email = registrationModel.Email,
            password = registrationModel.Password
        };

        try
        {
            var response = await client.PostAsJsonAsync(url, formData);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Success!");
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                JsonNode? node = JsonNode.Parse(await response.Content.ReadAsStringAsync());
                // Handle registration failure (you can display an error message, for example)
                string? errorMessage = node?["errors"]?.AsObject()?.Aggregate("", (a, p) => {
                    return a + "\n" + p.Key + ": " + p.Value?.AsArray()?.Aggregate("", (ag, node) => ag + node?.ToString()+ " ");
                });

                ToastMessage message = new () {
                    Type = ToastType.Danger,
                    Title = "Registration failed!",
                    HelpText = $"{DateTime.Now}",
                    Message = errorMessage ?? "Unkown error occurred"
                };
                messages.Add(message);
                Console.WriteLine("Registration failed: " + await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            ToastMessage message = new () {
                Type = ToastType.Danger,
                Title = "Registration failed!",
                HelpText = $"{DateTime.Now}",
                Message = "Unkown error occurred"
            };
            messages.Add(message);
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    public class RegistrationModel
    {
        public string UserName { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}